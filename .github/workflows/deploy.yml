name: Terraform Backend and Frontend Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform-deploy:
    name: Deploy Backend and Frontend Infrastructure
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 3: Terraform Init (Backend)
      - name: Initialize Terraform for Backend
        working-directory: ./infra/backend
        run: terraform init

      # Step 4: Terraform Apply (Backend)
      - name: Apply Backend Terraform Configuration
        working-directory: ./infra/backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

      # Step 5: Capture Backend Outputs
      - name: Get Backend Outputs
        working-directory: ./infra/backend
        id: backend_outputs
        run: |
          terraform output -raw region > REGION
          terraform output -raw user_pool_id > USER_POOL_ID
          terraform output -raw user_pool_client_id > USER_POOL_CLIENT_ID
          terraform output -raw cognito_domain > COGNITO_DOMAIN
          terraform output -raw api_endpoint > BACKEND_URL 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 6: Terraform Init (Frontend)
      - name: Initialize Terraform for Frontend
        working-directory: ./infra/frontend
        run: terraform init

      # Step 7: Terraform Apply (Frontend)
      - name: Apply Frontend Terraform Configuration
        working-directory: ./infra/frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

      # Step 8: Capture Frontend Outputs
      - name: Get Frontend Outputs
        working-directory: ./infra/frontend
        id: frontend_outputs
        run: |
          terraform output -raw cloudfront_distribution_domain_name > FRONTEND_URL
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 9: Build React App
      - name: Build React App
        working-directory: ./frontend/todo_ui
        run: |
          export REACT_APP_REGION=$(cat ../../terraform/backend/REGION)
          export REACT_APP_USER_POOL_ID=$(cat ../../terraform/backend/USER_POOL_ID)
          export REACT_APP_USER_POOL_CLIENT_ID=$(cat ../../terraform/backend/USER_POOL_CLIENT_ID)
          export REACT_APP_COGNITO_DOMAIN=$(cat ../../terraform/backend/COGNITO_DOMAIN)
          export REACT_APP_BACKEND_URL=$(cat ../../terraform/frontend/BACKEND_URL)
          export REACT_APP_FRONTEND_URL=$(cat ../../terraform/frontend/FRONTEND_URL)
          npm install
          npm run build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 10: Upload React Build to S3
      - name: Upload React Build to S3
        working-directory: ./frontend/todo_ui
        run: aws s3 cp ./build s3://$(terraform output -raw s3_bucket_name) --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
